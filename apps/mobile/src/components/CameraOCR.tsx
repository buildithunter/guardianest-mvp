import React, { useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  Alert,\n  Platform,\n  ActivityIndicator,\n} from 'react-native';\nimport { Camera, CameraType } from 'expo-camera';\nimport * as ImagePicker from 'expo-image-picker';\nimport { extractTextFromServer, uriToBase64, validateImageFileSize } from '@guardianest/shared/ocr';\nimport type { OCRResponse } from '@guardianest/shared';\n\ninterface CameraOCRProps {\n  onTextExtracted: (text: string, confidence: number) => void;\n  onClose: () => void;\n  serverUrl?: string;\n}\n\nexport const CameraOCR: React.FC<CameraOCRProps> = ({ \n  onTextExtracted, \n  onClose, \n  serverUrl = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:8787' \n}) => {\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const cameraRef = useRef<Camera>(null);\n\n  React.useEffect(() => {\n    (async () => {\n      const { status } = await Camera.requestCameraPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  const takePicture = async () => {\n    if (!cameraRef.current || processing) return;\n\n    try {\n      setProcessing(true);\n      const photo = await cameraRef.current.takePictureAsync({\n        quality: 0.8,\n        base64: false,\n      });\n\n      await processImage(photo.uri);\n    } catch (error) {\n      console.error('Error taking picture:', error);\n      Alert.alert('Error', 'Failed to take picture. Please try again.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const pickImage = async () => {\n    if (processing) return;\n\n    try {\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert('Permission needed', 'Please grant photo library permission to select images.');\n        return;\n      }\n\n      setProcessing(true);\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        await processImage(result.assets[0].uri);\n      }\n    } catch (error) {\n      console.error('Error picking image:', error);\n      Alert.alert('Error', 'Failed to select image. Please try again.');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const processImage = async (imageUri: string) => {\n    try {\n      // Convert to base64\n      const base64Image = await uriToBase64(imageUri);\n      \n      // Validate file size\n      if (!validateImageFileSize(base64Image)) {\n        Alert.alert('File too large', 'Please select an image smaller than 10MB.');\n        return;\n      }\n\n      // First try ML Kit (client-side) if available\n      // Note: This would require expo-ml-kit integration\n      // For now, we'll go straight to server-side OCR\n      \n      const result = await extractTextFromServer(base64Image, serverUrl);\n      \n      if (result.text.trim()) {\n        onTextExtracted(result.text, result.confidence);\n        onClose();\n      } else {\n        Alert.alert(\n          'No text found', \n          'No text was detected in the image. Please try a clearer image with visible text.'\n        );\n      }\n    } catch (error) {\n      console.error('OCR processing failed:', error);\n      Alert.alert(\n        'Processing failed', \n        'Failed to extract text from image. Please check your internet connection and try again.'\n      );\n    }\n  };\n\n  if (hasPermission === null) {\n    return (\n      <View style={styles.container}>\n        <Text>Requesting camera permission...</Text>\n      </View>\n    );\n  }\n\n  if (hasPermission === false) {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.permissionText}>No access to camera</Text>\n        <TouchableOpacity style={styles.button} onPress={pickImage}>\n          <Text style={styles.buttonText}>Choose from Gallery</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.button, styles.cancelButton]} onPress={onClose}>\n          <Text style={styles.buttonText}>Cancel</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={CameraType.back} ref={cameraRef}>\n        <View style={styles.overlay}>\n          <View style={styles.topBar}>\n            <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n              <Text style={styles.closeButtonText}>âœ•</Text>\n            </TouchableOpacity>\n          </View>\n          \n          <View style={styles.captureArea}>\n            <View style={styles.captureFrame} />\n            <Text style={styles.instructionText}>\n              Position text within the frame and tap the capture button\n            </Text>\n          </View>\n          \n          <View style={styles.controls}>\n            <TouchableOpacity \n              style={styles.galleryButton} \n              onPress={pickImage}\n              disabled={processing}\n            >\n              <Text style={styles.controlButtonText}>Gallery</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={[styles.captureButton, processing && styles.captureButtonDisabled]} \n              onPress={takePicture}\n              disabled={processing}\n            >\n              {processing ? (\n                <ActivityIndicator color=\"white\" />\n              ) : (\n                <View style={styles.captureButtonInner} />\n              )}\n            </TouchableOpacity>\n            \n            <View style={styles.placeholder} />\n          </View>\n        </View>\n      </Camera>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  camera: {\n    flex: 1,\n    width: '100%',\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  topBar: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    paddingTop: Platform.OS === 'ios' ? 50 : 20,\n    paddingRight: 20,\n  },\n  closeButton: {\n    backgroundColor: 'rgba(0,0,0,0.6)',\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  closeButtonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  captureArea: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40,\n  },\n  captureFrame: {\n    width: 300,\n    height: 200,\n    borderWidth: 2,\n    borderColor: 'white',\n    borderRadius: 10,\n    backgroundColor: 'transparent',\n  },\n  instructionText: {\n    color: 'white',\n    textAlign: 'center',\n    marginTop: 20,\n    fontSize: 16,\n    backgroundColor: 'rgba(0,0,0,0.6)',\n    padding: 10,\n    borderRadius: 5,\n  },\n  controls: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    paddingBottom: 50,\n    paddingHorizontal: 50,\n  },\n  galleryButton: {\n    backgroundColor: 'rgba(255,255,255,0.3)',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 25,\n    minWidth: 80,\n    alignItems: 'center',\n  },\n  controlButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  captureButton: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: 'white',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 4,\n    borderColor: 'rgba(255,255,255,0.3)',\n  },\n  captureButtonDisabled: {\n    backgroundColor: 'rgba(255,255,255,0.5)',\n  },\n  captureButtonInner: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: 'white',\n  },\n  placeholder: {\n    width: 80,\n  },\n  permissionText: {\n    color: 'white',\n    fontSize: 18,\n    marginBottom: 20,\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    paddingHorizontal: 30,\n    paddingVertical: 15,\n    borderRadius: 25,\n    marginVertical: 10,\n  },\n  cancelButton: {\n    backgroundColor: '#FF3B30',\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default CameraOCR;
