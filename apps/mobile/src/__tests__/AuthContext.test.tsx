import React from 'react';\nimport { renderHook, act, waitFor } from '@testing-library/react-native';\nimport { describe, it, expect, beforeEach, vi, Mock } from '@jest/globals';\nimport { AuthProvider, useAuth } from '../contexts/AuthContext';\n\n// Mock Supabase client\nconst mockSupabase = {\n  auth: {\n    getSession: vi.fn(),\n    signUp: vi.fn(),\n    signInWithPassword: vi.fn(),\n    signOut: vi.fn(),\n    getUser: vi.fn(),\n    onAuthStateChange: vi.fn(() => ({ \n      data: { subscription: { unsubscribe: vi.fn() } } \n    })),\n  },\n  from: vi.fn(() => ({\n    select: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    single: vi.fn(),\n    insert: vi.fn().mockReturnThis(),\n  })),\n};\n\n// Mock the shared module\nvi.mock('@guardianest/shared', () => ({\n  supabase: mockSupabase,\n  signUp: vi.fn(),\n  signIn: vi.fn(),\n  signOut: vi.fn(),\n  getCurrentUser: vi.fn(),\n  getProfile: vi.fn(),\n  createProfile: vi.fn(),\n  getChildByInviteCode: vi.fn(),\n  createChild: vi.fn(),\n}));\n\nconst mockSharedModule = require('@guardianest/shared');\n\nconst wrapper = ({ children }: { children: React.ReactNode }) => (\n  <AuthProvider>{children}</AuthProvider>\n);\n\ndescribe('AuthContext', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Default mock implementations\n    mockSupabase.auth.getSession.mockResolvedValue({ \n      data: { session: null }, \n      error: null \n    });\n    \n    mockSupabase.auth.onAuthStateChange.mockReturnValue({\n      data: { subscription: { unsubscribe: vi.fn() } }\n    });\n  });\n\n  describe('useAuth hook', () => {\n    it('should throw error when used outside AuthProvider', () => {\n      const { result } = renderHook(() => useAuth());\n      \n      expect(result.error).toBeDefined();\n      expect(result.error?.message).toBe(\n        'useAuth must be used within an AuthProvider'\n      );\n    });\n\n    it('should provide auth context when used within AuthProvider', async () => {\n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      expect(result.current.session).toBeNull();\n      expect(result.current.user).toBeNull();\n      expect(result.current.profile).toBeNull();\n      expect(result.current.signInWithEmail).toBeInstanceOf(Function);\n      expect(result.current.signUpAsParent).toBeInstanceOf(Function);\n      expect(result.current.signOutUser).toBeInstanceOf(Function);\n    });\n  });\n\n  describe('Authentication flows', () => {\n    it('should handle parent signup successfully', async () => {\n      const mockUser = { id: 'user-123', email: 'parent@test.com' };\n      \n      mockSharedModule.signUp.mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      });\n      \n      mockSharedModule.createProfile.mockResolvedValue({\n        data: { id: 'user-123', role: 'parent' },\n        error: null,\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let signupResult;\n      await act(async () => {\n        signupResult = await result.current.signUpAsParent(\n          'parent@test.com',\n          'password123',\n          '1985-06-15'\n        );\n      });\n      \n      expect(signupResult?.error).toBeNull();\n      expect(mockSharedModule.signUp).toHaveBeenCalledWith(\n        'parent@test.com',\n        'password123'\n      );\n      expect(mockSharedModule.createProfile).toHaveBeenCalledWith({\n        id: 'user-123',\n        role: 'parent',\n        dob: '1985-06-15',\n        tier: 'free',\n      });\n    });\n\n    it('should handle parent signin successfully', async () => {\n      mockSharedModule.signIn.mockResolvedValue({\n        data: { user: { id: 'user-123' }, session: { access_token: 'token' } },\n        error: null,\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let signinResult;\n      await act(async () => {\n        signinResult = await result.current.signInWithEmail(\n          'parent@test.com',\n          'password123'\n        );\n      });\n      \n      expect(signinResult?.error).toBeNull();\n      expect(mockSharedModule.signIn).toHaveBeenCalledWith(\n        'parent@test.com',\n        'password123'\n      );\n    });\n\n    it('should handle child invite code signin', async () => {\n      const mockChild = {\n        id: 'child-123',\n        name: 'Emma',\n        parent_id: 'parent-123',\n        invite_code: 'EMMA01',\n        age: 8,\n      };\n      \n      mockSharedModule.getChildByInviteCode.mockResolvedValue({\n        data: mockChild,\n        error: null,\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let inviteResult;\n      await act(async () => {\n        inviteResult = await result.current.signInWithInviteCode('EMMA01');\n      });\n      \n      expect(inviteResult?.error).toBeNull();\n      expect(inviteResult?.child).toEqual(mockChild);\n      expect(mockSharedModule.getChildByInviteCode).toHaveBeenCalledWith('EMMA01');\n    });\n\n    it('should handle child account creation', async () => {\n      const mockParentUser = { id: 'parent-123', email: 'parent@test.com' };\n      const mockChild = {\n        id: 'child-456',\n        parent_id: 'parent-123',\n        name: 'Alex',\n        age: 10,\n        invite_code: 'ALEX01',\n      };\n      \n      mockSharedModule.signIn.mockResolvedValue({\n        data: { user: mockParentUser },\n        error: null,\n      });\n      \n      mockSharedModule.createChild.mockResolvedValue({\n        data: mockChild,\n        error: null,\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let linkResult;\n      await act(async () => {\n        linkResult = await result.current.linkChildToParent(\n          'parent@test.com',\n          'password123',\n          'Alex',\n          10\n        );\n      });\n      \n      expect(linkResult?.error).toBeNull();\n      expect(linkResult?.inviteCode).toBe('ALEX01');\n      expect(mockSharedModule.createChild).toHaveBeenCalledWith({\n        parent_id: 'parent-123',\n        name: 'Alex',\n        age: 10,\n      });\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle signup errors', async () => {\n      mockSharedModule.signUp.mockResolvedValue({\n        data: null,\n        error: new Error('Email already registered'),\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let signupResult;\n      await act(async () => {\n        signupResult = await result.current.signUpAsParent(\n          'existing@test.com',\n          'password123'\n        );\n      });\n      \n      expect(signupResult?.error).toBeDefined();\n      expect(signupResult?.error?.message).toBe('Email already registered');\n    });\n\n    it('should handle invalid invite codes', async () => {\n      mockSharedModule.getChildByInviteCode.mockResolvedValue({\n        data: null,\n        error: new Error('Invalid invite code'),\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let inviteResult;\n      await act(async () => {\n        inviteResult = await result.current.signInWithInviteCode('INVALID');\n      });\n      \n      expect(inviteResult?.error).toBeDefined();\n      expect(inviteResult?.child).toBeUndefined();\n    });\n\n    it('should handle signin errors', async () => {\n      mockSharedModule.signIn.mockResolvedValue({\n        data: null,\n        error: new Error('Invalid credentials'),\n      });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      let signinResult;\n      await act(async () => {\n        signinResult = await result.current.signInWithEmail(\n          'wrong@test.com',\n          'wrongpassword'\n        );\n      });\n      \n      expect(signinResult?.error).toBeDefined();\n      expect(signinResult?.error?.message).toBe('Invalid credentials');\n    });\n  });\n\n  describe('Session management', () => {\n    it('should handle signout', async () => {\n      mockSharedModule.signOut.mockResolvedValue({ error: null });\n      \n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      await waitFor(() => {\n        expect(result.current.loading).toBe(false);\n      });\n      \n      await act(async () => {\n        await result.current.signOutUser();\n      });\n      \n      expect(mockSharedModule.signOut).toHaveBeenCalled();\n    });\n\n    it('should refresh profile data', async () => {\n      const mockProfile = {\n        id: 'user-123',\n        role: 'parent' as const,\n        tier: 'premium' as const,\n      };\n      \n      mockSharedModule.getProfile.mockResolvedValue({\n        data: mockProfile,\n        error: null,\n      });\n      \n      // Set up initial session\n      const { result } = renderHook(() => useAuth(), { wrapper });\n      \n      // Simulate having a user session\n      act(() => {\n        (result.current as any).user = { id: 'user-123' };\n      });\n      \n      await act(async () => {\n        await result.current.refreshProfile();\n      });\n      \n      expect(mockSharedModule.getProfile).toHaveBeenCalledWith('user-123');\n    });\n  });\n});
